#!/usr/bin/env ruby
# frozen_string_literal: true

require "roper"

include GLI::App

program_desc "Roper is a CLI tool used to help stage a dockerized web app."

version Roper::VERSION

subcommand_option_handling :normal
arguments :strict
sort_help :manually

desc "Pulls in github repo locally and runs docker-compose up on it"
command :lasso do |c|
  c.desc "* The repo full name '<owner>/<name>'"
  c.flag :r, :repo

  c.desc "The branch name"
  c.flag :b, :branch
  c.default_value "master"

  c.desc "The sha reference that we will post to"
  c.flag :s, :sha

  c.desc "A URL to a build status page"
  c.flag :l, :status_url

  c.desc "URL protocol to use in target_url for final traefik hosted container"
  c.default_value "https"
  c.flag :p, :protocol

  c.desc "URL domain to use in target_url for final traefik hosted container"
  c.flag :d, :domain

  c.action do |global_options, options, args|
    repo = options[:repo]
    branch = options[:branch]
    Roper::CLI.lasso(repo, branch, options)
    puts "lasso command ran"
  end
end

desc "Runs docker-compose down on local copy of repo and deletes the repo contents"
command :release do |c|
  c.desc "* The repo full name '<owner>/<name>'"
  c.flag :r, :repo

  c.desc "The branch name"
  c.flag :b, :branch
  c.default_value "master"

  c.action do |global_options, options, args|
    repo = options[:repo]
    branch = options[:branch]
    Roper::CLI.release(repo, branch, options)
    puts "release command ran"
  end
end

pre do |global, command, options, args|
  if args.count > 0
    raise "Unexpected arguments, this command does not take any arguments."
  end

  if command.name == :lasso
    raise "Protocol must be either 'http' or 'https'" unless ["http", "https"].include?(options[:protocol])
  end

  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
